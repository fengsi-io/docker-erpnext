#!/bin/bash
set -e

COMMON_SITE_CONFIG_TEMPLATE_FILE=$FRAPPE_BENCH_DIR/sites.original/common_site_config.json.template
COMMON_SITE_CONFIG_FILE=$FRAPPE_BENCH_DIR/sites/common_site_config.json

function check_envs() {
    envs=$*
    for e in $envs; do
        if [[ -z $(printenv "$e") ]]; then
            echo "$e is not set" && exit 1
        fi
    done
}

function new_common_site_config() {
    check_envs '
        DB_HOST
        DB_PORT
        ROOT_LOGIN
        ROOT_PASSWORD
        REDIS_CACHE
        REDIS_QUEUE
        SOCKETIO_PORT
        REDIS_SOCKETIO'

    echo -ne "-> generate common_site_config.json: "
    envsubst <"$COMMON_SITE_CONFIG_TEMPLATE_FILE" >"$COMMON_SITE_CONFIG_FILE"
    echo "done"
}

function new_site() {
    check_envs '
        SITE_NAME
        DB_NAME
        DB_PASSWORD
        ADMIN_PASSWORD'

    wait-for database

    echo -ne "-> sync original sites files: "
    rsync -aL "$FRAPPE_BENCH_DIR/sites.original/" "$FRAPPE_BENCH_DIR/sites"
    rm -rf "$FRAPPE_BENCH_DIR/sites.original"
    echo "done"

    # then create new site and install apps
    echo "-> create new site $SITE_NAME start"
    command="bench new-site $SITE_NAME \
        --db-type $DB_TYPE \
        --db-name $DB_NAME \
        --db-password $DB_PASSWORD \
        --admin-password $ADMIN_PASSWORD"

    if [[ $DB_TYPE = "mariadb" ]]; then
        command="$command --no-mariadb-socket"
    fi

    apps=$(cat "$FRAPPE_BENCH_DIR/sites/apps.txt")
    for app in $apps; do
        # frappe has been installed default, ignore it
        if [[ "$app" = "frappe" ]]; then
            continue
        fi
        command="$command --install-app $app"
    done
    eval "$command"

    echo "-> create new site $SITE_NAME done"
}

function migrate() {
    wait-for database
    bench ready-for-migration && bench --site "$SITE_NAME" migrate
}

# shellcheck source=/dev/null
function serve() {
    if [[ ! -f "$COMMON_SITE_CONFIG_FILE" ]]; then
        new_common_site_config
    fi

    # automatic migrate
    if [[ ! -d "$FRAPPE_BENCH_DIR/sites/$SITE_NAME" ]]; then
        new_site
    elif [[ "$AUTO_MIGRATE" != "false" ]]; then
        migrate
    fi

    source "$FRAPPE_BENCH_DIR/env/bin/activate"
    gunicorn -b "0.0.0.0:$WEBSERVER_PORT" \
        --worker-tmp-dir /dev/shm \
        --workers=$(($(nproc) * 2 + 1)) \
        --worker-class=gthread \
        --threads=4 \
        --log-file=- \
        --error-logfile=- \
        -t 120 frappe.app:application --preload
}

serve
